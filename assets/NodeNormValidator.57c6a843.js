import{T as j,a as l,_ as L,b as y,d as P,e as Q,P as V,r as $,o as h,f,g as T,w as z,F as b,h as v,i as q,j as a,k as x,t as U}from"./index.24b16168.js";function N(r){const n={UMLS:"https://uts.nlm.nih.gov/uts/umls/concept/"},m=r.toUpperCase().split(":")||[""],p=m[0];return new Set("HTTP","HTTPS","URN").has(p)?r:n[p]&&m.length>1?n[p]+r.substring(r.indexOf(":")+1):"http://bioregistry.io/"+encodeURIComponent(r)}function S(r){return new Set((r.equivalent_identifiers||[]).map(n=>n.identifier))}class I extends j{static convertRowToTests(n){const m=n.Source,p=n["Source URL"];function u(e,t){const c=e+"/get_normalized_nodes?curie="+encodeURIComponent(t);return fetch(c).then(o=>o.ok?o.json().catch(s=>l.failure(`NodeNorm /get_normalized_nodes returned a non-JSON result: ${s}`,"text",o)).then(s=>{if(!s)return l.failure("get_normalized_nodes returned invalid response","text",o);const i=s[t];if(!i)return l.failure(`get_normalized_nodes returned no response for ${t}`,"json",s);if(S(i).has(t)){let E="";if(i.id){const B=i.id.identifier,C=i.id.label;t===B?E=` ("${C}")`:E=` (${B} "${C}")`}return l.success(`Found ID ${t}${E}`,"NodeNorm",i)}else return l.failure(`ID ${t} could not be found`,"NodeNorm",i)}):l.failure("Could not get_normalized_nodes","text",o.statusText))}function D(e){return new I(`Check for ID ${e}`,{[e]:N(e)},m,p,function(t){return u(t,e)})}function k(e,t){return new I(`Check that ID ${e} has Biolink class ${t}`,{[e]:N(e)},m,p,function(c){return u(c,e).then(o=>{if(!o.status)return o;const s=o.result,i=new Set(s.type||[]);if(t.startsWith("!")){const _=t.substring(1);return i.has(_)?l.failure(`ID ${e} should not have Biolink class ${_} but does`,"NodeNorm",s):l.success(`ID ${e} does not have Biolink class ${_} as expected`,"NodeNorm",s)}else return i.has(t)?l.success(`ID ${e} has Biolink class ${t}`,"NodeNorm",s):l.failure(`ID ${e} does not have Biolink class ${t}`,"NodeNorm",s)})})}function g(e,t){return new I(`Check ID ${e} has preferred ID ${t}`,{[e]:N(e),[t]:N(t)},m,p,function(c){return u(c,e).then(o=>{if(!o.status)return o;const s=o.result,i=S(s);return s.id.identifier===t&&i.has(e)?l.success(`Query ID ${e} has preferred ID ${t}`,"NodeNorm",s):l.failure(`Query ID ${e} has preferred ID ${s.id.identifier}, not ${t}`,"NodeNorm",s)})})}function R(e,t){return new I(`Check ID ${e} and ID ${t} cluster together`,{[e]:N(e),[t]:N(t)},m,p,function(c){return u(c,e).then(o=>{if(!o.status)return o;const s=o.result,i=S(s),_=s.id.identifier;return i.has(e)&&i.has(t)?l.success(`ID ${e} and ID ${t} are both equivalent to ${_}.`,"NodeNorm",s):l.failure(`ID ${e} is equivalent to ${_} but ID ${t} is not.`,"NodeNorm",s)})})}const d=[];if(n["Query ID"]){const e=n["Query ID"];if(d.push(D(e)),n["Preferred ID"]){const t=n["Preferred ID"];d.push(D(t)),d.push(g(e,t)),n["Additional IDs"]&&n["Additional IDs"].split(/\s*\|\s*/).forEach(o=>{d.push(g(o,t)),d.push(R(o,e))})}else n["Additional IDs"]&&n["Additional IDs"].split(/\s*\|\s*/).forEach(c=>{d.push(R(c,e))});n["Biolink classes"]&&n["Biolink classes"].split(/\s*\|\s*/).forEach(c=>{d.push(k(e,c))})}return d}}const W={components:{TestResult:y,BTable:P,TextWithURLs:Q},data(){return{nodeNormEndpoints:{"NodeNorm-RENCI-exp":"https://nodenormalization-dev.apps.renci.org","NodeNorm-RENCI-dev":"https://nodenormalization-sri.renci.org","NodeNorm-ITRB-ci":"https://nodenorm.ci.transltr.io","NodeNorm-ITRB-test":"https://nodenorm.test.transltr.io","NodeNorm-ITRB-prod":"https://nodenorm.transltr.io"},testData:[],testDataErrors:[],testDataIncomplete:!0}},created(){this.loadGoogleSheet()},computed:{tests(){return this.testDataIncomplete?[]:this.testData.flatMap(r=>r["Ignore?"]&&r["Ignore?"]=="y"?[]:I.convertRowToTests(r))}},methods:{loadGoogleSheet(){this.testDataIncomplete=!0,this.testData=[],V.parse("https://docs.google.com/spreadsheets/d/11zebx8Qs1Tc3ShQR9nh4HRW8QSoo8k65w_xIaftN0no/gviz/tq?tqx=out:csv&sheet=Tests",{download:!0,header:!0,complete:r=>{this.testData=r.data,this.testDataIncomplete=!1},error:r=>{this.testDataErrors.push(r)}})}}},A=a("small",null,[a("a",{href:"/babel-validation/"},"Return to front page")],-1),F=a("h1",null,"Node Normalization Validation",-1),O=a("p",null,[a("a",{href:"https://github.com/TranslatorSRI/babel"},"Babel"),x(" is the program that generates the datasets of interrelated identifiers that underlies "),a("a",{href:"https://github.com/TranslatorSRI/NodeNormalization"},"Node Normalization"),x(" and "),a("a",{href:"https://github.com/TranslatorSRI/NameResolution"},"Name Resolution"),x(". This page will test several instances of the Node Normalization service. ")],-1),G=x("Reload"),H=a("h2",null,"Tests",-1),M={key:0},w=a("th",null,"Test",-1),J=a("th",null,"Source",-1),K=["href"];function X(r,n,m,p,u,D){const k=$("b-button"),g=$("TextWithURLs"),R=$("TestResult"),d=$("b-table-simple");return h(),f(b,null,[A,F,O,T(k,{onClick:n[0]||(n[0]=e=>D.loadGoogleSheet())},{default:z(()=>[G]),_:1}),H,u.testDataErrors?(h(),f("ul",M,[(h(!0),f(b,null,v(u.testDataErrors,e=>(h(),f("li",null,U(e),1))),256))])):q("",!0),T(d,{striped:"",hover:"",bordered:""},{default:z(()=>[a("thead",null,[a("tr",null,[w,J,(h(!0),f(b,null,v(Object.keys(u.nodeNormEndpoints),e=>(h(),f("th",null,[a("a",{target:"_blank",href:u.nodeNormEndpoints[e]+"/docs"},U(e),9,K)]))),256))])]),a("tbody",null,[(h(!0),f(b,null,v(D.tests,e=>(h(),f("tr",null,[a("td",null,[T(g,{text:e.description,urls:e.urls},null,8,["text","urls"])]),a("td",null,[T(g,{text:e.source,urls:{URL:e.source_url}},null,8,["text","urls"])]),(h(!0),f(b,null,v(Object.keys(u.nodeNormEndpoints),t=>(h(),f("td",null,[T(R,{test:e,endpoint:u.nodeNormEndpoints[t],description:e.description+":"+e.source+":"+u.nodeNormEndpoints[t]},null,8,["test","endpoint","description"])]))),256))]))),256))])]),_:1})],64)}const Z=L(W,[["render",X]]);export{Z as default};
